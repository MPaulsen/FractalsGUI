
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.*;
import java.util.*;

public class SierpinskiVisualizer extends javax.swing.JFrame {

private static final int SIZE = 512; // should be a power of 2
private Graphics graphics;

	// Colors to display.
	private static enum COLOR {
		BLUE(Color.BLUE,"Blue"),
		RED(Color.RED,"Red"),
                GREEN(Color.GREEN,"Green"),
                ORANGE(Color.ORANGE,"Orange"),		
		YELLOW(Color.YELLOW,"Yellow");
		
			
		
		
		private Color color;
		private String name;
		
		COLOR(Color c, String n) {
			this.color = c;
                        this.name = n;
		}
		
		private Color getColor() {
			return color;
		}
		
		public String toString() {
			return name;
		}
	}
                
        
    public SierpinskiVisualizer() {
        initComponents();
        graphics = canvas.getGraphics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new java.awt.Canvas();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        colorBox1 = new javax.swing.JComboBox(COLOR.values());
        randomizeCheckBox = new javax.swing.JCheckBox();
        rDepthText = new javax.swing.JTextField();
        colorBox2 = new javax.swing.JComboBox(COLOR.values());
        colorBox3 = new javax.swing.JComboBox(COLOR.values());
        colorBox4 = new javax.swing.JComboBox(COLOR.values());
        colorBox5 = new javax.swing.JComboBox(COLOR.values());
        drawBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TRIFORCE");
        setMaximumSize(new java.awt.Dimension(800, 512));
        setMinimumSize(new java.awt.Dimension(800, 512));
        setPreferredSize(new java.awt.Dimension(800, 512));
        setResizable(false);

        canvas.setBackground(java.awt.Color.black);
        canvas.setMaximumSize(new java.awt.Dimension(512, 512));
        canvas.setMinimumSize(new java.awt.Dimension(512, 512));

        jLabel1.setText("Recursive Depth:");

        jLabel2.setText("Color 1:");

        jLabel3.setText("Color 2:");

        jLabel4.setText("Color 4:");

        jLabel5.setText("Color 5:");

        jLabel6.setText("Color 3:");

        colorBox1.setMaximumRowCount(5);

        randomizeCheckBox.setText("Randomize colors at each level");

        rDepthText.setText("1");

        colorBox2.setMaximumRowCount(5);
        colorBox2.setSelectedIndex(1);

        colorBox3.setMaximumRowCount(5);
        colorBox3.setSelectedIndex(2);

        colorBox4.setMaximumRowCount(5);
        colorBox4.setSelectedIndex(3);

        colorBox5.setMaximumRowCount(5);
        colorBox5.setSelectedIndex(4);

        drawBtn.setText("Draw");
        drawBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawBtnMouseClicked(evt);
            }
        });
        drawBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(rDepthText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colorBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colorBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colorBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colorBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colorBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(randomizeCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(drawBtn)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rDepthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(colorBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(colorBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(colorBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(colorBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(colorBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(randomizeCheckBox)
                .addGap(18, 18, 18)
                .addComponent(drawBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drawBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawBtnMouseClicked
        try{
        if (Integer.parseInt(rDepthText.getText()) > 7 || Integer.parseInt(rDepthText.getText()) < 0){
            JOptionPane.showMessageDialog(null, "Please enter a recursive depth of between 0 and 7 for stability.","Error",JOptionPane.WARNING_MESSAGE);
        }
        else{
        draw();
        i=0;
        }
        }
        catch (NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Nice try smart guy, that's not a number.","Error",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_drawBtnMouseClicked

    private void drawBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drawBtnActionPerformed
	
    // Used to keep track of coloring the triangles correctly.  
	private Color[] colorScheme = new Color[5];
	private int depth;
        
        
// Draw it!
	private void draw() {
		
		// Erase the old image.
		
		canvas.paint(graphics);
		// Try and get the depth
		depth=0;
		try {
			depth = Integer.parseInt(rDepthText.getText());
			
			
			
		} catch (NumberFormatException ex) {

			JOptionPane.showMessageDialog(null, "Input Error","Error",JOptionPane.WARNING_MESSAGE);

			return;
		}
		
		// Generate the color scheme to use.
		if (randomizeCheckBox.isSelected()) {

                        for (int i=0;i<5;i++){
                            int seed = (int)((Math.random()*5)+1);
                            if (seed == 1) colorScheme[i] = COLOR.BLUE.getColor();
                            else if (seed == 2) colorScheme[i] = COLOR.RED.getColor();
                            else if (seed == 3) colorScheme[i] = COLOR.GREEN.getColor();
                            else if (seed == 4) colorScheme[i] = COLOR.YELLOW.getColor();
                            else if (seed == 5) colorScheme[i] = COLOR.ORANGE.getColor();
                        } 
			
		}
		else {
		
                        COLOR selectedColor = (COLOR)colorBox1.getSelectedItem();
                        colorScheme[0] = selectedColor.getColor();
                        selectedColor = (COLOR)colorBox2.getSelectedItem();
                        colorScheme[1] = selectedColor.getColor();
                        selectedColor = (COLOR)colorBox3.getSelectedItem();
                        colorScheme[2] = selectedColor.getColor();
                        selectedColor = (COLOR)colorBox4.getSelectedItem();
                        colorScheme[3] = selectedColor.getColor();
                        selectedColor = (COLOR)colorBox5.getSelectedItem();
                        colorScheme[4] = selectedColor.getColor();
                        
                }
		
		// Draw the base triangle.
		draw(0,0,0,SIZE);

	

		// Now draw the rest of the inner triangles with the recursive function.
		if (depth != 0) draw(depth,0,0,SIZE);
                
	}    
            
            int[] xPoints = new int[3];
            int[] yPoints = new int[3];
            int i = 0;
        // Recursive function to draw triangles at a given depth at the specified square given.
	private void draw(int d, int x, int y, int S) {
		
            xPoints[0] = x;
            xPoints[1] = S/2+x;
            xPoints[2] = x+S;
            yPoints[0] = y+S;
            yPoints[1] = y;
            yPoints[2] = y+S;
            Polygon p = new Polygon(xPoints,yPoints,3);     
            graphics.setColor(colorScheme[i]);
            graphics.fillPolygon(p);
            if (d==0){

                    graphics.setColor(colorScheme[i]);
                    graphics.fillPolygon(p);


                    return;
                }
		
		
		// Otherwise, draw big triangle at this level, between the points
		// shown in the figure. You can use the fillPolygon() method of
		// the Graphics object of your Canvas. Make sure you get the color
		// right!
		
                else { 
	
                // Draw the subtriangles. The self-similarity of fractals means
		// that they are themselves Sierpinski triangles of depth d-1.
		// draw top middle triangle
                i++;
                i=i%5;
                int tri = i;
		draw(d-1, x+S/4, y, S/2);
                i = tri;
		// draw bottom left triangle
		draw(d-1, x, y+S/2, S/2);
		i = tri;
		// draw bottom right triangle
		draw(d-1, x+S/2, y+S/2, S/2);

                }
	}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SierpinskiVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SierpinskiVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SierpinskiVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SierpinskiVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SierpinskiVisualizer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas;
    private javax.swing.JComboBox colorBox1;
    private javax.swing.JComboBox colorBox2;
    private javax.swing.JComboBox colorBox3;
    private javax.swing.JComboBox colorBox4;
    private javax.swing.JComboBox colorBox5;
    private javax.swing.JButton drawBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField rDepthText;
    private javax.swing.JCheckBox randomizeCheckBox;
    // End of variables declaration//GEN-END:variables
}

